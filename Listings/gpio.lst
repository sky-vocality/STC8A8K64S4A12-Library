C51 COMPILER V9.59.0.0   GPIO                                                              04/09/2021 17:07:55 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\Objects\gpio.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Core\Src\gpio.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Core\Inc) DEBUG 
                    -OBJECTEXTEND PRINT(.\Listings\gpio.lst) OBJECT(.\Objects\gpio.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    gpio.c
   4            * @author  sky-vocality(»ùÓÚPineconePi(»ùÓÚºê¾§¿Æ¼¼STC15¿âº¯Êý½øÐÐÐÞ¸Ä)¿âº¯Êý½øÐÐÐÞ¸Ä)
   5            * @version V1.0.0
   6            * @date    20-January-2021
   7            * @brief  This document is used for GPIO configuration
   8            * @License:GNU General Public License v3.0         
   9            ******************************************************************************
  10            * @attention
  11            * 
  12            * 
  13            *  
  14            * 
  15            * 
  16            * 
  17            * 
  18            * 
  19            * 
  20            ******************************************************************************
  21          **/
  22                  
  23          #include        "gpio.h"
  24          
  25          
  26          //========================================================================
  27          // Function:unsigned char       GPIO_Inilize(unsigned char GPIO, GPIO_InitTypeDef *GPIOx)|º¯Êý: unsigned char   GP
             -IO_Inilize(unsigned char GPIO, GPIO_InitTypeDef *GPIOx)
  28          // Description:Initialize the IO port.|ÃèÊö: ³õÊ¼»¯IO¿Ú.
  29          // Parameter: GPIO£ºGPIO_P0:P0 pins (8)£¬GPIO_P1:P1 pins (8)£¬GPIO_P2:P2 pins (8)£¬GPIO_P3:P3 pins (8)£¬
  30          //             GPIO_P4:P4 pins (8)£¬GPIO_P5:P5 pins (8)£¬
  31          //                         GPIOx: For structural parameters, please refer to the structure description in gpio.h..
  32          // ²ÎÊý: GPIO£ºGPIO_P0:P0Òý½Å£¨8¸ö£©£¬GPIO_P1:P1Òý½Å£¨8¸ö£©£¬GPIO_P2:P2Òý½Å£¨8¸ö£©£¬GPIO_P3:P3Òý½Å£¨8¸ö£©£
             -¬
  33          //             GPIO_P4:P4Òý½Å£¨8¸ö£©£¬GPIO_P5:P5Òý½Å£¨8¸ö£©£¬
  34          //       GPIOx: ½á¹¹²ÎÊý,Çë²Î¿¼gpio.hÀïµÄ½á¹¹ÌåËµÃ÷.
  35          // Return:Successful return 0, empty return 1, error return 2.|·µ»Ø: ³É¹¦·µ»Ø0, ¿Õ²Ù×÷·µ»Ø1,´íÎó·µ»Ø2.
  36          // Version:VER1.0.0|°æ±¾: VER1.0.0
  37          // Date:2018-12-20|ÈÕÆÚ: 2018-12-20
  38          // Note: Set P ^ 0 and P ^ 1 as up-pull quasi-bidirectional ports by following steps
  39          //       GPIO_InitTypeDef GPIO_InitTypeDef;
  40          //               GPIO_InitTypeDef.Mode = GPIO_PullUp;//Up-drawing alignment bi-directional port
  41          //       GPIO_InitTypeDef.Pin = GPIO_Pin_0|GPIO_Pin_1;//Configuration of IO pins Px.0 and Px.1 at the same
             - time.1
  42          //               GPIO_Inilize(GPIO_P0 ,&GPIO_InitTypeDef);//IO pin P 0.0
  43          // ±¸×¢: Í¨¹ýÒÔÏÂ²½Öè½«P0^0ºÍP0^1ÉèÖÃÎªÉÏÀ­×¼Ë«Ïò¿Ú
  44          //       GPIO_InitTypeDef GPIO_InitTypeDef;
  45          //               GPIO_InitTypeDef.Mode = GPIO_PullUp;//ÉÏÀ­×¼Ë«Ïò¿Ú
  46          //       GPIO_InitTypeDef.Pin = GPIO_Pin_0|GPIO_Pin_1;//Í¬Ê±ÅäÖÃIOÒý½Å Px.0ÓëPx.1
  47          //               GPIO_Inilize(GPIO_P0 ,&GPIO_InitTypeDef);//IOÒý½Å P0.0
  48          //========================================================================
  49          unsigned char   GPIO_Inilize(unsigned char GPIO, GPIO_InitTypeDef *GPIOx)
  50          {
  51   1              if(GPIO > GPIO_P5)                              return 1;       //Empty operation
C51 COMPILER V9.59.0.0   GPIO                                                              04/09/2021 17:07:55 PAGE 2   

  52   1              if(GPIOx->Mode > GPIO_OUT_PP)   return 2;       //error
  53   1              if(GPIO == GPIO_P0)
  54   1              {
  55   2                      if(GPIOx->Mode == GPIO_PullUp)          P0M1 &= ~GPIOx->Pin,    P0M0 &= ~GPIOx->Pin;     //Up-drawing alignment bi-dir
             -ectional port|ÉÏÀ­×¼Ë«Ïò¿Ú
  56   2                      if(GPIOx->Mode == GPIO_HighZ)           P0M1 |=  GPIOx->Pin,    P0M0 &= ~GPIOx->Pin;     //Floating input|¸¡¿ÕÊäÈë
  57   2                      if(GPIOx->Mode == GPIO_OUT_OD)          P0M1 |=  GPIOx->Pin,    P0M0 |=  GPIOx->Pin;     //Open drain output|¿ªÂ©Êä³ö
  58   2                      if(GPIOx->Mode == GPIO_OUT_PP)          P0M1 &= ~GPIOx->Pin,    P0M0 |=  GPIOx->Pin;     //push-pull|ÍÆÍìÊä³ö
  59   2              }
  60   1              if(GPIO == GPIO_P1)
  61   1              {
  62   2                      if(GPIOx->Mode == GPIO_PullUp)          P1M1 &= ~GPIOx->Pin,    P1M0 &= ~GPIOx->Pin;     //Up-drawing alignment bi-dir
             -ectional port|ÉÏÀ­×¼Ë«Ïò¿Ú
  63   2                      if(GPIOx->Mode == GPIO_HighZ)           P1M1 |=  GPIOx->Pin,    P1M0 &= ~GPIOx->Pin;     //Floating input|¸¡¿ÕÊäÈë
  64   2                      if(GPIOx->Mode == GPIO_OUT_OD)          P1M1 |=  GPIOx->Pin,    P1M0 |=  GPIOx->Pin;     //Open drain output|¿ªÂ©Êä³ö
  65   2                      if(GPIOx->Mode == GPIO_OUT_PP)          P1M1 &= ~GPIOx->Pin,    P1M0 |=  GPIOx->Pin;     //push-pull|ÍÆÍìÊä³ö
  66   2              }
  67   1              if(GPIO == GPIO_P2)
  68   1              {
  69   2                      if(GPIOx->Mode == GPIO_PullUp)          P2M1 &= ~GPIOx->Pin,    P2M0 &= ~GPIOx->Pin;     //Up-drawing alignment bi-dir
             -ectional port|ÉÏÀ­×¼Ë«Ïò¿Ú
  70   2                      if(GPIOx->Mode == GPIO_HighZ)           P2M1 |=  GPIOx->Pin,    P2M0 &= ~GPIOx->Pin;     //Floating input|¸¡¿ÕÊäÈë
  71   2                      if(GPIOx->Mode == GPIO_OUT_OD)          P2M1 |=  GPIOx->Pin,    P2M0 |=  GPIOx->Pin;     //Open drain output|¿ªÂ©Êä³ö
  72   2                      if(GPIOx->Mode == GPIO_OUT_PP)          P2M1 &= ~GPIOx->Pin,    P2M0 |=  GPIOx->Pin;     //push-pull|ÍÆÍìÊä³ö
  73   2              }
  74   1              if(GPIO == GPIO_P3)
  75   1              {
  76   2                      if(GPIOx->Mode == GPIO_PullUp)          P3M1 &= ~GPIOx->Pin,    P3M0 &= ~GPIOx->Pin;     //Up-drawing alignment bi-dir
             -ectional port|ÉÏÀ­×¼Ë«Ïò¿Ú
  77   2                      if(GPIOx->Mode == GPIO_HighZ)           P3M1 |=  GPIOx->Pin,    P3M0 &= ~GPIOx->Pin;     //Floating input|¸¡¿ÕÊäÈë
  78   2                      if(GPIOx->Mode == GPIO_OUT_OD)          P3M1 |=  GPIOx->Pin,    P3M0 |=  GPIOx->Pin;     //Open drain output|¿ªÂ©Êä³ö
  79   2                      if(GPIOx->Mode == GPIO_OUT_PP)          P3M1 &= ~GPIOx->Pin,    P3M0 |=  GPIOx->Pin;     //push-pull|ÍÆÍìÊä³ö
  80   2              }
  81   1              if(GPIO == GPIO_P4)
  82   1              {
  83   2                      if(GPIOx->Mode == GPIO_PullUp)          P4M1 &= ~GPIOx->Pin,    P4M0 &= ~GPIOx->Pin;     //Up-drawing alignment bi-dir
             -ectional port|ÉÏÀ­×¼Ë«Ïò¿Ú
  84   2                      if(GPIOx->Mode == GPIO_HighZ)           P4M1 |=  GPIOx->Pin,    P4M0 &= ~GPIOx->Pin;     //Floating input|¸¡¿ÕÊäÈë
  85   2                      if(GPIOx->Mode == GPIO_OUT_OD)          P4M1 |=  GPIOx->Pin,    P4M0 |=  GPIOx->Pin;     //Open drain output|¿ªÂ©Êä³ö
  86   2                      if(GPIOx->Mode == GPIO_OUT_PP)          P4M1 &= ~GPIOx->Pin,    P4M0 |=  GPIOx->Pin;     //push-pull|ÍÆÍìÊä³ö
  87   2              }
  88   1              if(GPIO == GPIO_P5)
  89   1              {
  90   2                      if(GPIOx->Mode == GPIO_PullUp)          P5M1 &= ~GPIOx->Pin,    P5M0 &= ~GPIOx->Pin;     //Up-drawing alignment bi-dir
             -ectional port|ÉÏÀ­×¼Ë«Ïò¿Ú
  91   2                      if(GPIOx->Mode == GPIO_HighZ)           P5M1 |=  GPIOx->Pin,    P5M0 &= ~GPIOx->Pin;     //Floating input|¸¡¿ÕÊäÈë
  92   2                      if(GPIOx->Mode == GPIO_OUT_OD)          P5M1 |=  GPIOx->Pin,    P5M0 |=  GPIOx->Pin;     //Open drain output|¿ªÂ©Êä³ö
  93   2                      if(GPIOx->Mode == GPIO_OUT_PP)          P5M1 &= ~GPIOx->Pin,    P5M0 |=  GPIOx->Pin;     //push-pull|ÍÆÍìÊä³ö
  94   2              }
  95   1              return 0;       //Success|³É¹¦
  96   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    481    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.59.0.0   GPIO                                                              04/09/2021 17:07:55 PAGE 3   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
