C51 COMPILER V9.59.0.0   EXIT                                                              04/15/2021 11:12:08 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE EXIT
OBJECT MODULE PLACED IN .\Objects\exit.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Core\Src\exit.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Core\Inc) DEBUG 
                    -OBJECTEXTEND PRINT(.\Listings\exit.lst) OBJECT(.\Objects\exit.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    exti.c
   4            * @author  sky-vocality(»ùÓÚPineconePi(»ùÓÚºê¾§¿Æ¼¼STC15¿âº¯Êý½øÐÐÐÞ¸Ä)¿âº¯Êý½øÐÐÐÞ¸Ä)
   5            * @version V1.0.0
   6            * @date    20-January-2021
   7            * @brief  This file is used for external interrupt configuration
   8            * @License:GNU General Public License v3.0         
   9            ******************************************************************************
  10            * @attention
  11            *
  12            *  
  13            * 
  14            * 
  15            * 
  16            * 
  17            *
  18            * 
  19            ******************************************************************************
  20          **/
  21          
  22          #include "exit.h"
  23          
  24          int encoder_num = 0;
  25          
  26          /********************* INT0 interrupt function|INT0ÖÐ¶Ïº¯Êý *************************/
  27          void Ext_INT0 (void) interrupt EXT_INT0         //The sign has been cleared when entering or interrupting|½øÖÐ¶ÏÊ
             -±ÒÑ¾­Çå³ý±êÖ¾
  28          {
  29   1              //Add user logic here|´Ë´¦Ìí¼ÓÓÃ»§Âß¼­
  30   1              encoder_num++;
  31   1      }
  32          
  33          /********************* INT1 interrupt function|INT1ÖÐ¶Ïº¯Êý *************************/
  34          void Ext_INT1 (void) interrupt EXT_INT1         //The sign has been cleared when entering or interrupting|½øÖÐ¶ÏÊ
             -±ÒÑ¾­Çå³ý±êÖ¾
  35          {
  36   1              //Add user logic here|´Ë´¦Ìí¼ÓÓÃ»§Âß¼­
  37   1      }
  38          
  39          /********************* INT2 interrupt function|INT2ÖÐ¶Ïº¯Êý *************************/
  40          void Ext_INT2 (void) interrupt EXT_INT2 //
  41          {
  42   1              //Add user logic here|´Ë´¦Ìí¼ÓÓÃ»§Âß¼­
  43   1      }
  44          
  45          /********************* INT3 interrupt function|INT3ÖÐ¶Ïº¯Êý *************************/
  46          void Ext_INT3 (void) interrupt EXT_INT3
  47          {
  48   1              //Add user logic here|´Ë´¦Ìí¼ÓÓÃ»§Âß¼­
  49   1      }
  50          
  51          /********************* INT4 interrupt function|INT4ÖÐ¶Ïº¯Êý *************************/
  52          void Ext_INT4 (void) interrupt EXT_INT4
C51 COMPILER V9.59.0.0   EXIT                                                              04/15/2021 11:12:08 PAGE 2   

  53          {
  54   1              //Add user logic here|´Ë´¦Ìí¼ÓÓÃ»§Âß¼­
  55   1      }
  56          
  57          //========================================================================
  58          // Function:unsigned char Ext_Inilize(unsigned char EXT, EXTI_InitTypeDef *INTx)|º¯Êý: unsigned char Ext_I
             -nilize(unsigned char EXT, EXTI_InitTypeDef *INTx)
  59          // Description:External interrupt initializer|ÃèÊö: Íâ²¿ÖÐ¶Ï³õÊ¼»¯³ÌÐò.
  60          // Parameter:EXT,Interrupt sequence number£¨EXT_INT0£ºExternal interrupt 0 , EXT_INT1£ºExternal interrupt 
             -1 , EXT_INT2£ºExternal interrupt 2 , 
  61          //                                          EXT_INT3£ºExternal interrupt 3 £¬ EXT_INT4£ºExternal interrupt
             - 4)
  62          // ²ÎÊý: EXT,ÖÐ¶ÏÐòºÅ£¨EXT_INT0£ºÍâ²¿ÖÐ¶Ï0 , EXT_INT1£ºÍâ²¿ÖÐ¶Ï1 , EXT_INT2£ºÍâ²¿ÖÐ¶Ï2 , 
  63          //       EXT_INT3£ºÍâ²¿ÖÐ¶Ï3 £¬ EXT_INT4£ºÍâ²¿ÖÐ¶Ï4)
  64          //       INTx: ½á¹¹²ÎÊý,Çë²Î¿¼Exti.hÀïµÄ¶¨Òå.
  65          // Return:Successful return 0, empty return 1, error return 2.|·µ»Ø: ³É¹¦·µ»Ø0, ¿Õ²Ù×÷·µ»Ø1,´íÎó·µ»Ø2.
  66          // Version:VER1.0.0|°æ±¾: VER1.0.0
  67          // Date:2018-12-20|ÈÕÆÚ: 2018-12-20
  68          // Note: Enable INT0 by following steps
  69          //      EXTI_InitTypeDef EXTI_InitTypeDef;
  70          //      EXTI_InitTypeDef.EXTI_Mode = EXT_MODE_RiseFall;//Rising edge interruption
  71          //      EXTI_InitTypeDef.EXTI_Polity = PolityHigh;//High priority|¸ßÓÅÏÈ¼¶
  72          //      EXTI_InitTypeDef.EXTI_Interrupt = ENABLE;//Enable|Ê¹ÄÜ
  73          //      Ext_Inilize(EXT_INT0,&EXTI_InitTypeDef);//Complete configuration|Íê³ÉÅäÖÃ
  74          // ±¸×¢: Í¨¹ýÒÔÏÂ²½ÖèÊ¹ÄÜINT0
  75          //      EXTI_InitTypeDef EXTI_InitTypeDef;
  76          //      EXTI_InitTypeDef.EXTI_Mode = EXT_MODE_RiseFall;//ÉÏÉýÑØÖÐ¶Ï
  77          //      EXTI_InitTypeDef.EXTI_Polity = PolityHigh;//¸ßÓÅÏÈ¼¶
  78          //      EXTI_InitTypeDef.EXTI_Interrupt = ENABLE;//Ê¹ÄÜ
  79          //      Ext_Inilize(EXT_INT0,&EXTI_InitTypeDef);//Íê³ÉÅäÖÃ
  80          //========================================================================
  81          unsigned char Ext_Inilize(unsigned char EXT, EXTI_InitTypeDef *INTx)
  82          {
  83   1              if(EXT >  EXT_INT4)     return 1;       //Empty operation|¿Õ²Ù×÷
  84   1              
  85   1              EA = 1;
  86   1              
  87   1              if(EXT == EXT_INT0)     //External interrupt 0|ÍâÖÐ¶Ï0
  88   1              {
  89   2                      if(INTx->EXTI_Interrupt == ENABLE)              EX0 = 1;        //Allowed interruption|ÔÊÐíÖÐ¶Ï
  90   2                      else                                                                    EX0 = 0;        //No interruption|½ûÖ¹ÖÐ¶Ï
  91   2                      if(INTx->EXTI_Polity == PolityHigh)             PX0 = 1;        //High priority interrupt|¸ßÓÅÏÈ¼¶ÖÐ¶Ï
  92   2                      else                                                                    PX0 = 0;        //Low priority interrupt|µÍÓÅÏÈ¼¶ÖÐ¶Ï
  93   2                      if(INTx->EXTI_Mode == EXT_MODE_Fall)    IT0 = 1;        //Falling edge interruption|ÏÂ½µÑØÖÐ¶Ï
  94   2                      else                                                                    IT0 = 0;        //Rise, fall and interrupt|ÉÏÉý,ÏÂ½µÑØÖÐ¶Ï
  95   2                      return  0;              //Success|³É¹¦
  96   2              }
  97   1      
  98   1              if(EXT == EXT_INT1)     //External interrupt 1|ÍâÖÐ¶Ï1
  99   1              {
 100   2                      if(INTx->EXTI_Interrupt == ENABLE)              EX1 = 1;        //Allowed interruption|ÔÊÐíÖÐ¶Ï
 101   2                      else                                                                    EX1 = 0;        //No interruption|½ûÖ¹ÖÐ¶Ï
 102   2                      if(INTx->EXTI_Polity == PolityHigh)             PX1 = 1;        //High priority interrupt|¸ßÓÅÏÈ¼¶ÖÐ¶Ï
 103   2                      else                                                                    PX1 = 0;        //Low priority interrupt|µÍÓÅÏÈ¼¶ÖÐ¶Ï
 104   2                      if(INTx->EXTI_Mode == EXT_MODE_Fall)    IT1 = 1;        //Falling edge interruption|ÏÂ½µÑØÖÐ¶Ï
 105   2                      else                                                                    IT1 = 0;        //Rise, fall and interrupt|ÉÏÉý,ÏÂ½µÑØÖÐ¶Ï
 106   2                      return  0;              //Success|³É¹¦
 107   2              }
 108   1      
 109   1              if(EXT == EXT_INT2)             //Outer interrupt 2, fixed to lower priority interrupt|ÍâÖÐ¶Ï2, ¹Ì¶¨ÎªÏÂ½µÑØµÍÓÅÏÈ¼¶
             -ÖÐ¶Ï
 110   1              {
C51 COMPILER V9.59.0.0   EXIT                                                              04/15/2021 11:12:08 PAGE 3   

 111   2                      if(INTx->EXTI_Interrupt == ENABLE)      INTCLKO |=  (1 << 4);   //Allowed interruption|ÔÊÐíÖÐ¶Ï 
 112   2                      else                                                            INTCLKO &= ~(1 << 4);   //No interruption|½ûÖ¹ÖÐ¶Ï
 113   2                      return  0;              //Success|³É¹¦
 114   2              }
 115   1      
 116   1              if(EXT == EXT_INT3)             //Outer interrupt 3, fixed to lower priority interrupt|ÍâÖÐ¶Ï3, ¹Ì¶¨ÎªÏÂ½µÑØµÍÓÅÏÈ¼¶
             -ÖÐ¶Ï
 117   1              {
 118   2                      if(INTx->EXTI_Interrupt == ENABLE)      INTCLKO |=  (1 << 5);   //Allowed interruption|ÔÊÐíÖÐ¶Ï 
 119   2                      else                                                            INTCLKO &= ~(1 << 5);   //No interruption|½ûÖ¹ÖÐ¶Ï
 120   2                      return  0;              //Success|³É¹¦
 121   2              }
 122   1      
 123   1              if(EXT == EXT_INT4)             //External interrupt 4, fixed to lower priority interrupt|ÍâÖÐ¶Ï4, ¹Ì¶¨ÎªÏÂ½µÑØµÍÓÅÏ
             -È¼¶ÖÐ¶Ï
 124   1              {
 125   2                      if(INTx->EXTI_Interrupt == ENABLE)      INTCLKO |=  (1 << 6);   //Allowed interruption|ÔÊÐíÖÐ¶Ï 
 126   2                      else                                                            INTCLKO &= ~(1 << 6);   //No interruption|½ûÖ¹ÖÐ¶Ï
 127   2                      return  0;              //Success|³É¹¦
 128   2              }
 129   1              return 2;       //fail|Ê§°Ü
 130   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    231    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
