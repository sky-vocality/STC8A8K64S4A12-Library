C51 COMPILER V9.59.0.0   EXIT                                                              01/23/2021 23:30:12 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE EXIT
OBJECT MODULE PLACED IN .\Objects\exit.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Core\Src\exit.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Core\Inc) DEBUG OBJECT
                    -EXTEND PRINT(.\Listings\exit.lst) TABS(2) OBJECT(.\Objects\exit.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    exti.c
   4            * @author  PineconePi(»ùÓÚºê¾§¿Æ¼¼STC15¿âº¯Êý½øÐÐÐÞ¸Ä)
   5            * @version V1.0.0
   6            * @date    20-December-2018
   7            * @brief  This file is used for external interrupt configuration
   8            * @License:GNU General Public License v3.0         
   9            ******************************************************************************
  10            * @attention
  11            
  12            *
  13            *  
  14            * 
  15            * 
  16            * 
  17            * 
  18            *
  19            * 
  20            ******************************************************************************
  21            **/
  22          
  23          #include "exit.h"
  24          
  25          /********************* INT0 interrupt function|INT0ÖÐ¶Ïº¯Êý *************************/
  26          void Ext_INT0 (void) interrupt EXT_INT0   //The sign has been cleared when entering or interrupting|½øÖÐ¶ÏÊ
             -±ÒÑ¾­Çå³ý±êÖ¾
  27          {
  28   1        //Add user logic here|´Ë´¦Ìí¼ÓÓÃ»§Âß¼­
  29   1      }
  30          
  31          /********************* INT1 interrupt function|INT1ÖÐ¶Ïº¯Êý *************************/
  32          void Ext_INT1 (void) interrupt EXT_INT1   //The sign has been cleared when entering or interrupting|½øÖÐ¶ÏÊ
             -±ÒÑ¾­Çå³ý±êÖ¾
  33          {
  34   1        //Add user logic here|´Ë´¦Ìí¼ÓÓÃ»§Âß¼­
  35   1      }
  36          
  37          /********************* INT2 interrupt function|INT2ÖÐ¶Ïº¯Êý *************************/
  38          void Ext_INT2 (void) interrupt EXT_INT2 //
  39          {
  40   1        //Add user logic here|´Ë´¦Ìí¼ÓÓÃ»§Âß¼­
  41   1      }
  42          
  43          /********************* INT3 interrupt function|INT3ÖÐ¶Ïº¯Êý *************************/
  44          void Ext_INT3 (void) interrupt EXT_INT3
  45          {
  46   1        //Add user logic here|´Ë´¦Ìí¼ÓÓÃ»§Âß¼­
  47   1      }
  48          
  49          /********************* INT4 interrupt function|INT4ÖÐ¶Ïº¯Êý *************************/
  50          void Ext_INT4 (void) interrupt EXT_INT4
  51          {
  52   1        //Add user logic here|´Ë´¦Ìí¼ÓÓÃ»§Âß¼­
C51 COMPILER V9.59.0.0   EXIT                                                              01/23/2021 23:30:12 PAGE 2   

  53   1      }
  54          
  55          //========================================================================
  56          // Function:unsigned char Ext_Inilize(unsigned char EXT, EXTI_InitTypeDef *INTx)|º¯Êý: unsigned char Ext_I
             -nilize(unsigned char EXT, EXTI_InitTypeDef *INTx)
  57          // Description:External interrupt initializer|ÃèÊö: Íâ²¿ÖÐ¶Ï³õÊ¼»¯³ÌÐò.
  58          // Parameter:EXT,Interrupt sequence number£¨EXT_INT0£ºExternal interrupt 0 , EXT_INT1£ºExternal interrupt 
             -1 , EXT_INT2£ºExternal interrupt 2 , 
  59          //                                          EXT_INT3£ºExternal interrupt 3 £¬ EXT_INT4£ºExternal interrupt
             - 4)
  60          // ²ÎÊý: EXT,ÖÐ¶ÏÐòºÅ£¨EXT_INT0£ºÍâ²¿ÖÐ¶Ï0 , EXT_INT1£ºÍâ²¿ÖÐ¶Ï1 , EXT_INT2£ºÍâ²¿ÖÐ¶Ï2 , 
  61          //       EXT_INT3£ºÍâ²¿ÖÐ¶Ï3 £¬ EXT_INT4£ºÍâ²¿ÖÐ¶Ï4)
  62          //       INTx: ½á¹¹²ÎÊý,Çë²Î¿¼Exti.hÀïµÄ¶¨Òå.
  63          // Return:Successful return 0, empty return 1, error return 2.|·µ»Ø: ³É¹¦·µ»Ø0, ¿Õ²Ù×÷·µ»Ø1,´íÎó·µ»Ø2.
  64          // Version:VER1.0.0|°æ±¾: VER1.0.0
  65          // Date:2018-12-20|ÈÕÆÚ: 2018-12-20
  66          // Note: Enable INT0 by following steps
  67          //  EXTI_InitTypeDef EXTI_InitTypeDef;
  68          //  EXTI_InitTypeDef.EXTI_Mode = EXT_MODE_RiseFall;//Rising edge interruption
  69          //  EXTI_InitTypeDef.EXTI_Polity = PolityHigh;//High priority|¸ßÓÅÏÈ¼¶
  70          //  EXTI_InitTypeDef.EXTI_Interrupt = ENABLE;//Enable|Ê¹ÄÜ
  71          //  Ext_Inilize(EXT_INT0,&EXTI_InitTypeDef);//Complete configuration|Íê³ÉÅäÖÃ
  72          // ±¸×¢: Í¨¹ýÒÔÏÂ²½ÖèÊ¹ÄÜINT0
  73          //  EXTI_InitTypeDef EXTI_InitTypeDef;
  74          //  EXTI_InitTypeDef.EXTI_Mode = EXT_MODE_RiseFall;//ÉÏÉýÑØÖÐ¶Ï
  75          //  EXTI_InitTypeDef.EXTI_Polity = PolityHigh;//¸ßÓÅÏÈ¼¶
  76          //  EXTI_InitTypeDef.EXTI_Interrupt = ENABLE;//Ê¹ÄÜ
  77          //  Ext_Inilize(EXT_INT0,&EXTI_InitTypeDef);//Íê³ÉÅäÖÃ
  78          //========================================================================
  79          unsigned char Ext_Inilize(unsigned char EXT, EXTI_InitTypeDef *INTx)
  80          {
  81   1        if(EXT >  EXT_INT4) return 1; //Empty operation|¿Õ²Ù×÷
  82   1        
  83   1        EA = 1;
  84   1        
  85   1        if(EXT == EXT_INT0) //External interrupt 0|ÍâÖÐ¶Ï0
  86   1        {
  87   2          if(INTx->EXTI_Interrupt == ENABLE)    EX0 = 1;  //Allowed interruption|ÔÊÐíÖÐ¶Ï
  88   2          else                  EX0 = 0;  //No interruption|½ûÖ¹ÖÐ¶Ï
  89   2          if(INTx->EXTI_Polity == PolityHigh)   PX0 = 1;  //High priority interrupt|¸ßÓÅÏÈ¼¶ÖÐ¶Ï
  90   2          else                  PX0 = 0;  //Low priority interrupt|µÍÓÅÏÈ¼¶ÖÐ¶Ï
  91   2          if(INTx->EXTI_Mode == EXT_MODE_Fall)  IT0 = 1;  //Falling edge interruption|ÏÂ½µÑØÖÐ¶Ï
  92   2          else                  IT0 = 0;  //Rise, fall and interrupt|ÉÏÉý,ÏÂ½µÑØÖÐ¶Ï
  93   2          return  0;    //Success|³É¹¦
  94   2        }
  95   1      
  96   1        if(EXT == EXT_INT1) //External interrupt 1|ÍâÖÐ¶Ï1
  97   1        {
  98   2          if(INTx->EXTI_Interrupt == ENABLE)    EX1 = 1;  //Allowed interruption|ÔÊÐíÖÐ¶Ï
  99   2          else                  EX1 = 0;  //No interruption|½ûÖ¹ÖÐ¶Ï
 100   2          if(INTx->EXTI_Polity == PolityHigh)   PX1 = 1;  //High priority interrupt|¸ßÓÅÏÈ¼¶ÖÐ¶Ï
 101   2          else                  PX1 = 0;  //Low priority interrupt|µÍÓÅÏÈ¼¶ÖÐ¶Ï
 102   2          if(INTx->EXTI_Mode == EXT_MODE_Fall)  IT1 = 1;  //Falling edge interruption|ÏÂ½µÑØÖÐ¶Ï
 103   2          else                  IT1 = 0;  //Rise, fall and interrupt|ÉÏÉý,ÏÂ½µÑØÖÐ¶Ï
 104   2          return  0;    //Success|³É¹¦
 105   2        }
 106   1      
 107   1        if(EXT == EXT_INT2)   //Outer interrupt 2, fixed to lower priority interrupt|ÍâÖÐ¶Ï2, ¹Ì¶¨ÎªÏÂ½µÑØµÍÓÅÏÈ¼¶
             -ÖÐ¶Ï
 108   1        {
 109   2          if(INTx->EXTI_Interrupt == ENABLE)  INTCLKO |=  (1 << 4); //Allowed interruption|ÔÊÐíÖÐ¶Ï 
 110   2          else                INTCLKO &= ~(1 << 4); //No interruption|½ûÖ¹ÖÐ¶Ï
C51 COMPILER V9.59.0.0   EXIT                                                              01/23/2021 23:30:12 PAGE 3   

 111   2          return  0;    //Success|³É¹¦
 112   2        }
 113   1      
 114   1        if(EXT == EXT_INT3)   //Outer interrupt 3, fixed to lower priority interrupt|ÍâÖÐ¶Ï3, ¹Ì¶¨ÎªÏÂ½µÑØµÍÓÅÏÈ¼¶
             -ÖÐ¶Ï
 115   1        {
 116   2          if(INTx->EXTI_Interrupt == ENABLE)  INTCLKO |=  (1 << 5); //Allowed interruption|ÔÊÐíÖÐ¶Ï 
 117   2          else                INTCLKO &= ~(1 << 5); //No interruption|½ûÖ¹ÖÐ¶Ï
 118   2          return  0;    //Success|³É¹¦
 119   2        }
 120   1      
 121   1        if(EXT == EXT_INT4)   //External interrupt 4, fixed to lower priority interrupt|ÍâÖÐ¶Ï4, ¹Ì¶¨ÎªÏÂ½µÑØµÍÓÅÏ
             -È¼¶ÖÐ¶Ï
 122   1        {
 123   2          if(INTx->EXTI_Interrupt == ENABLE)  INTCLKO |=  (1 << 6); //Allowed interruption|ÔÊÐíÖÐ¶Ï 
 124   2          else                INTCLKO &= ~(1 << 6); //No interruption|½ûÖ¹ÖÐ¶Ï
 125   2          return  0;    //Success|³É¹¦
 126   2        }
 127   1        return 2; //fail|Ê§°Ü
 128   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    205    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
