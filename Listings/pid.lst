C51 COMPILER V9.59.0.0   PID                                                               02/06/2021 13:14:08 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\Objects\pid.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Core\Src\pid.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Core\Inc) DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\pid.lst) TABS(2) OBJECT(.\Objects\pid.obj)

line level    source

   1          /**
   2           ******************************************************************************
   3           * @file    pid.h
   4           * @author  sky-vocality
   5           * @version V1.0.1
   6           * @date    6-February-2021
   7           * @brief  This file is a PID regulator
   8           * @License:GNU General Public License v3.0     
   9           ******************************************************************************
  10           * @attention
  11           * 
  12           * 
  13           * 
  14           * 
  15           * 
  16           * 
  17           * 
  18           * 
  19           ******************************************************************************
  20          **/
  21          
  22          #include "pid.h"
  23          
  24          #define Inter_Max   2000
  25          
  26          void PID_Control(unsigned char pid_type, float current_position,float expected_position,PID* motor_type)
  27          {
  28   1        if(pid_type == position)
  29   1        {
  30   2          //  float error_position;
  31   2          motor_type->error_last=motor_type->error_now;
  32   2          motor_type->error_now = expected_position - current_position;
  33   2          motor_type->error_inter += motor_type->error_now;
  34   2          // limit intergration of pid
  35   2          if(motor_type->error_inter>Inter_Max)
  36   2            motor_type->error_inter = Inter_Max;
  37   2          if(motor_type->error_inter<-Inter_Max)
  38   2            motor_type->error_inter = -Inter_Max;
  39   2            motor_type->pid_out = motor_type->Kp * motor_type->error_now + motor_type->Ki * motor_type->error_int
             -er +  motor_type->Kd * (motor_type->error_now-motor_type->error_last);
  40   2            // limit out of pid
  41   2              if(motor_type->pid_out > motor_type->out_limit)
  42   2                  motor_type->pid_out = motor_type->out_limit;
  43   2              else if (motor_type->pid_out < -motor_type->out_limit)
  44   2                  motor_type->pid_out = -motor_type->out_limit;
  45   2        }
  46   1          else if(pid_type == increment)
  47   1        {
  48   2          motor_type->error_last=motor_type->error_now;
  49   2          motor_type->error_now = expected_position - current_position;
  50   2          motor_type->pid_out += motor_type->Kp * (motor_type->error_now - motor_type->error_last) + motor_type->K
             -i * motor_type->error_now;
  51   2          if(motor_type->pid_out > motor_type->out_limit)
  52   2                  motor_type->pid_out = motor_type->out_limit;
C51 COMPILER V9.59.0.0   PID                                                               02/06/2021 13:14:08 PAGE 2   

  53   2              else if (motor_type->pid_out < -motor_type->out_limit)
  54   2                  motor_type->pid_out = -motor_type->out_limit;
  55   2        }
  56   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    698    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
