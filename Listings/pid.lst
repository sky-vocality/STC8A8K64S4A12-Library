C51 COMPILER V9.60.0.0   PID                                                               04/12/2021 22:40:55 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\Objects\pid.obj
COMPILER INVOKED BY: E:\KEIL5\C51\BIN\C51.EXE Core\Src\pid.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Core\Inc) DEBUG OBJ
                    -ECTEXTEND PRINT(.\Listings\pid.lst) TABS(2) OBJECT(.\Objects\pid.obj)

line level    source

   1          /**
   2           ******************************************************************************
   3           * @file    pid.h
   4           * @author  sky-vocality
   5           * @version V1.0.1
   6           * @date    6-February-2021
   7           * @brief  This file is a PID regulator
   8           * @License:GNU General Public License v3.0     
   9           ******************************************************************************
  10           * @attention
  11           * 
  12           * 
  13           * 
  14           * 
  15           * 
  16           * 
  17           * 
  18           * 
  19           ******************************************************************************
  20          **/
  21          
  22          #include "pid.h"
  23          
  24          #define Inter_Max   5
  25          
  26          PID wheel_pid = {2.5, 0.8, 0, 0, 0, 0, 980, 0, 0};
  27          PID server_pid = {1, 0.05, 0.01, 0, 0, 0, -112.5, 112.5, 0};
  28          
  29          void PID_Control(unsigned char pid_type, float current_position,float expected_position,PID* motor_type)
  30          {
  31   1        if(pid_type == position)
  32   1        {
  33   2          //  float error_position;
  34   2          motor_type->error_last=motor_type->error_now;
  35   2          motor_type->error_now = expected_position - current_position;
  36   2          motor_type->error_inter += motor_type->error_now;
  37   2          // limit intergration of pid
  38   2          if(motor_type->error_inter>Inter_Max)
  39   2            motor_type->error_inter = Inter_Max;
  40   2          if(motor_type->error_inter<-Inter_Max)
  41   2            motor_type->error_inter = -Inter_Max;
  42   2            motor_type->pid_out = motor_type->Kp * motor_type->error_now + motor_type->Ki * motor_type->error_int
             -er +  motor_type->Kd * (motor_type->error_now-motor_type->error_last);
  43   2            // limit out of pid
  44   2              if(motor_type->pid_out > motor_type->out_limit_max)
  45   2                  motor_type->pid_out = motor_type->out_limit_max;
  46   2              else if (motor_type->pid_out < motor_type->out_limit_low)
  47   2                  motor_type->pid_out = motor_type->out_limit_low;
  48   2        }
  49   1          else if(pid_type == increment)
  50   1        {
  51   2          motor_type->error_last=motor_type->error_now;
  52   2          motor_type->error_now = expected_position - current_position;
  53   2          motor_type->pid_out += motor_type->Kp * (motor_type->error_now - motor_type->error_last) + motor_type->K
C51 COMPILER V9.60.0.0   PID                                                               04/12/2021 22:40:55 PAGE 2   

             -i * motor_type->error_now;
  54   2          // limit out of pid
  55   2          if(motor_type->pid_out > motor_type->out_limit_max)
  56   2                  motor_type->pid_out = motor_type->out_limit_max;
  57   2              else if (motor_type->pid_out < motor_type->out_limit_low)
  58   2                  motor_type->pid_out = motor_type->out_limit_low;
  59   2        }
  60   1      }
  61          
  62          void wheel_pid_timer_init()
  63          {
  64   1        TIM_InitTypeDef TIM_InitTypeDef;
  65   1        TIM_InitTypeDef.TIM_Mode = TIM_16BitAutoReload;   //Working mode|����ģʽ,    TIM_16BitAutoReload,T
             -IM_16Bit,TIM_8BitAutoReload,TIM_16BitAutoReloadNoMask
  66   1        TIM_InitTypeDef.TIM_Polity = PolityHigh;    //Priority Setting|���ȼ����� PolityHigh,Polity
             -Low
  67   1        TIM_InitTypeDef.TIM_Interrupt = ENABLE; //Interrupt enable|�ж�����   ENABLE,DISABLE
  68   1        TIM_InitTypeDef.TIM_ClkSource = TIM_CLOCK_1T; //Clock source|ʱ��Դ   TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_C
             -LOCK_Ext
  69   1        TIM_InitTypeDef.TIM_ClkOut = ENABLE;    //Programmable clock output|�ɱ��ʱ�����, ENABLE,DI
             -SABLE
  70   1        TIM_InitTypeDef.TIM_Value = 41536;    //Initial load|װ�س�ֵ
  71   1        TIM_InitTypeDef.TIM_Run = ENABLE;   //�Ƿ�����|�Ƿ�����   ENABLE,DISABLE
  72   1        Timer_Inilize(Timer0, &TIM_InitTypeDef);
  73   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    850    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     72      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
