C51 COMPILER V9.59.0.0   TIMER                                                             05/17/2021 08:55:41 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Objects\timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Core\Src\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Core\Inc) DEBUG
                    - OBJECTEXTEND PRINT(.\Listings\timer.lst) OBJECT(.\Objects\timer.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    timer.c
   4            * @author  sky-vocality(基于PineconePi(基于宏晶科技STC15库函数进行修改)库函数进行修改)
   5            * @version V1.0.0
   6            * @date    11-January-2021
   7            * @brief  This document is used for timer configuration 
   8            * @License:GNU General Public License v3.0         
   9            ******************************************************************************
  10            * @attention
  11            *
  12            *Timer Interrupt Processing Function in timer.c
  13            *  
  14            * 
  15            * 
  16            * 
  17            * 
  18            *
  19            * 
  20            ******************************************************************************
  21          **/
  22          
  23          #include        "timer.h"
  24          #include "oled.h"
  25          
  26          int timer0_num = 0;
  27          int timer1_num = 0;
  28          int timer2_num = 0;
  29          float angle_aim = -1.0;
  30          float follow_aim = 50;
  31          
  32          /********************* Timer0 interrupt function|Timer0中断函数************************/
  33          void timer0_int (void) interrupt 1
  34          {
  35   1              timer0_num++;
  36   1              if(timer0_num == 10)
  37   1              {
  38   2                      PID_Control(increment, encoder_num, 160, &wheel_pid);
  39   2                      wheel_pwm.PWM_Value = wheel_pid.pid_out;
  40   2                      PWM_PCA_Output(PWM_0,&wheel_pwm);
  41   2                      //LCD_P6x8Str(0, 0,(unsigned char*)"num:");
  42   2                      //LCD_Print16(25,0,encoder_num);
  43   2                      //LCD_P6x8Str(0, 7,(unsigned char*)"val:");
  44   2                      //LCD_Print16(25,7,wheel_pwm.PWM_Value);
  45   2                      timer0_num = 0;
  46   2                      encoder_num = 0;
  47   2              }
  48   1      }
  49          
  50          /********************* Timer1 interrupt function|Timer1中断函数************************/
  51          void timer1_int (void) interrupt 3
  52          {
  53   1              timer1_num++;
  54   1              if(timer1_num == 10)
C51 COMPILER V9.59.0.0   TIMER                                                             05/17/2021 08:55:41 PAGE 2   

  55   1              {
  56   2                      jy901_update();
  57   2                      PID_Control(angle, -jy901.Roll, angle_aim, &server_pid);
  58   2                      server_pwm.PWM_Value = server_pid.pid_out + 78;
  59   2                      PWM_CLK_Output(PWM_1,&server_pwm);
  60   2                      timer1_num = 0;
  61   2              }
  62   1      }
  63          
  64          /********************* Timer2 interrupt function|Timer2中断函数************************/
  65          void timer2_int (void) interrupt 12
  66          {
  67   1              timer2_num++;
  68   1              if(timer2_num == 40)
  69   1              {
  70   2                      PID_Control(position, LMV358_Output(), follow_aim, &follow_pid);
  71   2                      angle_aim = follow_pid.pid_out;
  72   2                      timer2_num = 0;
  73   2              }
  74   1      }
  75          
  76          
  77          //========================================================================
  78          // Function:unsigned char       Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)|函数: unsigned char     Time
             -r_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  79          // Description: Timer initialization program.|描述: 定时器初始化程序.
  80          // Parameter: Refer to the structure definition in timer. C|参数:  请参考timer.c里面的结构体定义
  81          //       
  82          //       
  83          // Return:|返回: 
  84          // Version:VER1.0.0|版本: VER1.0.0
  85          // Date:2021-01-29|日期: 2018-01-29
  86          // Author: sky-vokality|作者: sky-vokality
  87          // Note:|备注:
  88          //      
  89          //      
  90          //      
  91          //      
  92          //      
  93          //========================================================================
  94          unsigned char   Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  95          {
  96   1              if(TIM > Timer2)        return 1;       //Empty operation|空操作
  97   1      
  98   1              EA = 1;
  99   1              
 100   1              if(TIM == Timer0)
 101   1              {
 102   2                      TR0 = 0;                //Stop count|停止计数
 103   2                      if(TIMx->TIM_Interrupt == ENABLE)               ET0 = 1;        //Allowed interruption|允许中断
 104   2                      else                                                                    ET0 = 0;        //No interruption|禁止中断
 105   2                      if(TIMx->TIM_Polity == PolityHigh)              PT0 = 1;        //High priority interrupt|高优先级中断
 106   2                      else                                                                    PT0 = 0;        //Low priority interrupt|低优先级中断
 107   2                      if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2;       //Error|错误
 108   2                      TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //Operating mode: 0:16 bit auto-reloading, 1:16 bit timing/count
             -ing, 2:8 bit auto-reloading, 3:16 bit auto-reloading, unshieldable interruption|工作模式,0: 16位自动重装, 1: 16位定时/计
             -数, 2: 8位自动重装, 3: 16位自动重装, 不可屏蔽中断
 109   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~0x80;  //12T
 110   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  0x80;  //1T
 111   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        TMOD |=  0x04;  //External Counting or Frequency Division|对外计
             -数或分频
 112   2                      else                                                                            TMOD &= ~0x04;  //timing|定时
C51 COMPILER V9.59.0.0   TIMER                                                             05/17/2021 08:55:41 PAGE 3   

 113   2                      if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x01;       //Output clock|输出时钟
 114   2                      else                                                    INTCLKO &= ~0x01;       //No Clock Output|不输出时钟
 115   2                      
 116   2                      TH0 = (unsigned char)(TIMx->TIM_Value >> 8);
 117   2                      TL0 = (unsigned char)TIMx->TIM_Value;
 118   2                      if(TIMx->TIM_Run == ENABLE)     TR0 = 1;        //Start running|开始运行
 119   2                      return  0;              //成功
 120   2              }
 121   1      
 122   1              if(TIM == Timer1)
 123   1              {
 124   2                      TR1 = 0;                //Stop count停止计数
 125   2                      if(TIMx->TIM_Interrupt == ENABLE)               ET1 = 1;        //Allowed interruption|允许中断
 126   2                      else                                                                    ET1 = 0;        //No interruption|禁止中断
 127   2                      if(TIMx->TIM_Polity == PolityHigh)              PT1 = 1;        //High priority interrupt|高优先级中断
 128   2                      else                                                                    PT1 = 0;        //Low priority interrupt|低优先级中断
 129   2                      if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2;       //error|错误
 130   2                      TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //Work mode, 0:16 bit auto-reloading, 1:16 bit timing/counting, 
             -2:8 bit auto-reloading|工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 131   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~0x40;  //12T
 132   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  0x40;  //1T
 133   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        TMOD |=  0x40;  //External Counting or Frequency Division|对外计
             -数或分频
 134   2                      else                                                                            TMOD &= ~0x40;  //timing|定时
 135   2                      if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x02;       //Output clock|输出时钟
 136   2                      else                                                    INTCLKO &= ~0x02;       //No Clock Output|不输出时钟
 137   2                      
 138   2                      TH1 = (unsigned char)(TIMx->TIM_Value >> 8);
 139   2                      TL1 = (unsigned char)TIMx->TIM_Value;
 140   2                      if(TIMx->TIM_Run == ENABLE)     TR1 = 1;        //Start running|开始运行
 141   2                      return  0;              //success|成功
 142   2              }
 143   1      
 144   1              if(TIM == Timer2)               //Timer2,固定为16位自动重装, 中断无优先级
 145   1              {
 146   2                      AUXR &= ~(1<<4);        //Stop count停止计数
 147   2                      if(TIMx->TIM_Interrupt == ENABLE)                       IE2  |=  (1<<2);        //Allowed interruption|允许中断
 148   2                      else                                                                            IE2  &= ~(1<<2);        //No interruption|禁止中断
 149   2                      if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)        return 2;
 150   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~(1<<2);        //12T
 151   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  (1<<2);        //1T
 152   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        AUXR |=  (1<<3);        //External Counting or Frequency Division|对外
             -计数或分频
 153   2                      else                                                                            AUXR &= ~(1<<3);        //timing|定时
 154   2                      if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x04;       //Output clock|输出时钟
 155   2                      else                                                    INTCLKO &= ~0x04;       //No Clock Output|不输出时钟
 156   2      
 157   2                      TH2 = (unsigned char)(TIMx->TIM_Value >> 8);
 158   2                      TL2 = (unsigned char)TIMx->TIM_Value;
 159   2                      if(TIMx->TIM_Run == ENABLE)     AUXR |=  (1<<4);        //Start running|开始运行
 160   2                      return  0;              //success|成功
 161   2              }
 162   1              return 2;       //Error|错误
 163   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    993    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     14    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.59.0.0   TIMER                                                             05/17/2021 08:55:41 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
