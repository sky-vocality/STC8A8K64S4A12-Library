C51 COMPILER V9.60.0.0   TIMER                                                             05/04/2021 11:13:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Objects\timer.obj
COMPILER INVOKED BY: E:\KEIL5\C51\BIN\C51.EXE Core\Src\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Core\Inc) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\timer.lst) TABS(2) OBJECT(.\Objects\timer.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    timer.c
   4            * @author  sky-vocality(基于PineconePi(基于宏晶科技STC15库函数进行修改)库函数进行修改)
   5            * @version V1.0.0
   6            * @date    11-January-2021
   7            * @brief  This document is used for timer configuration 
   8            * @License:GNU General Public License v3.0         
   9            ******************************************************************************
  10            * @attention
  11            *
  12            *Timer Interrupt Processing Function in timer.c
  13            *  
  14            * 
  15            * 
  16            * 
  17            * 
  18            *
  19            * 
  20            ******************************************************************************
  21          **/
  22          
  23          #include  "timer.h"
  24          
  25          int timer0_num = 0;
  26          int timer1_num = 0;
  27          
  28          /********************* Timer0 interrupt function|Timer0中断函数************************/
  29          void timer0_int (void) interrupt 1
  30          {
  31   1        timer0_num++;
  32   1        if(timer0_num == 50)
  33   1        {
  34   2          PID_Control(increment, encoder_num, 50, &wheel_pid);
  35   2          wheel_pwm.PWM_Value = wheel_pid.pid_out;
  36   2          PWM_PCA_Output(PWM_0,&wheel_pwm);
  37   2          timer0_num = 0;
  38   2          //encoder_num = 0;
  39   2        }
  40   1      }
  41          
  42          /********************* Timer1 interrupt function|Timer1中断函数************************/
  43          void timer1_int (void) interrupt 3
  44          {
  45   1        timer1_num++;
  46   1        if(timer1_num == 50)
  47   1        {
  48   2          jy901_update();
  49   2          PID_Control(angle, -jy901.Roll, 0, &server_pid);
  50   2          server_pwm.PWM_Value = server_pid.pid_out + 147.5;
  51   2          PWM_CLK_Output(PWM_1,&server_pwm);
  52   2          timer1_num = 0;
  53   2        }
  54   1      }
C51 COMPILER V9.60.0.0   TIMER                                                             05/04/2021 11:13:46 PAGE 2   

  55          
  56          /********************* Timer2 interrupt function|Timer2中断函数************************/
  57          void timer2_int (void) interrupt 12
  58          {
  59   1      
  60   1      }
  61          
  62          
  63          //========================================================================
  64          // Function:unsigned char Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)|函数: unsigned char Time
             -r_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  65          // Description: Timer initialization program.|描述: 定时器初始化程序.
  66          // Parameter: Refer to the structure definition in timer. C|参数:  请参考timer.c里面的结构体定义
  67          //       
  68          //       
  69          // Return:|返回: 
  70          // Version:VER1.0.0|版本: VER1.0.0
  71          // Date:2021-01-29|日期: 2018-01-29
  72          // Author: sky-vokality|作者: sky-vokality
  73          // Note:|备注:
  74          //  
  75          //  
  76          //  
  77          //  
  78          //  
  79          //========================================================================
  80          unsigned char Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  81          {
  82   1        if(TIM > Timer2)  return 1; //Empty operation|空操作
  83   1      
  84   1        EA = 1;
  85   1        
  86   1        if(TIM == Timer0)
  87   1        {
  88   2          TR0 = 0;    //Stop count|停止计数
  89   2          if(TIMx->TIM_Interrupt == ENABLE)   ET0 = 1;  //Allowed interruption|允许中断
  90   2          else                  ET0 = 0;  //No interruption|禁止中断
  91   2          if(TIMx->TIM_Polity == PolityHigh)    PT0 = 1;  //High priority interrupt|高优先级中断
  92   2          else                  PT0 = 0;  //Low priority interrupt|低优先级中断
  93   2          if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2; //Error|错误
  94   2          TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //Operating mode: 0:16 bit auto-reloading, 1:16 bit timing/count
             -ing, 2:8 bit auto-reloading, 3:16 bit auto-reloading, unshieldable interruption|工作模式,0: 16位自动重装, 1: 16位定时/计
             -数, 2: 8位自动重装, 3: 16位自动重装, 不可屏蔽中断
  95   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x80;  //12T
  96   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x80;  //1T
  97   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x04;  //External Counting or Frequency Division|对外计
             -数或分频
  98   2          else                    TMOD &= ~0x04;  //timing|定时
  99   2          if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x01; //Output clock|输出时钟
 100   2          else              INTCLKO &= ~0x01; //No Clock Output|不输出时钟
 101   2          
 102   2          TH0 = (unsigned char)(TIMx->TIM_Value >> 8);
 103   2          TL0 = (unsigned char)TIMx->TIM_Value;
 104   2          if(TIMx->TIM_Run == ENABLE) TR0 = 1;  //Start running|开始运行
 105   2          return  0;    //成功
 106   2        }
 107   1      
 108   1        if(TIM == Timer1)
 109   1        {
 110   2          TR1 = 0;    //Stop count停止计数
 111   2          if(TIMx->TIM_Interrupt == ENABLE)   ET1 = 1;  //Allowed interruption|允许中断
 112   2          else                  ET1 = 0;  //No interruption|禁止中断
C51 COMPILER V9.60.0.0   TIMER                                                             05/04/2021 11:13:46 PAGE 3   

 113   2          if(TIMx->TIM_Polity == PolityHigh)    PT1 = 1;  //High priority interrupt|高优先级中断
 114   2          else                  PT1 = 0;  //Low priority interrupt|低优先级中断
 115   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //error|错误
 116   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //Work mode, 0:16 bit auto-reloading, 1:16 bit timing/counting, 
             -2:8 bit auto-reloading|工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 117   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x40;  //12T
 118   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x40;  //1T
 119   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x40;  //External Counting or Frequency Division|对外计
             -数或分频
 120   2          else                    TMOD &= ~0x40;  //timing|定时
 121   2          if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x02; //Output clock|输出时钟
 122   2          else              INTCLKO &= ~0x02; //No Clock Output|不输出时钟
 123   2          
 124   2          TH1 = (unsigned char)(TIMx->TIM_Value >> 8);
 125   2          TL1 = (unsigned char)TIMx->TIM_Value;
 126   2          if(TIMx->TIM_Run == ENABLE) TR1 = 1;  //Start running|开始运行
 127   2          return  0;    //success|成功
 128   2        }
 129   1      
 130   1        if(TIM == Timer2)   //Timer2,固定为16位自动重装, 中断无优先级
 131   1        {
 132   2          AUXR &= ~(1<<4);  //Stop count停止计数
 133   2          if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //Allowed interruption|允许中断
 134   2          else                    IE2  &= ~(1<<2);  //No interruption|禁止中断
 135   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 136   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~(1<<2);  //12T
 137   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  (1<<2);  //1T
 138   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  AUXR |=  (1<<3);  //External Counting or Frequency Division|对外
             -计数或分频
 139   2          else                    AUXR &= ~(1<<3);  //timing|定时
 140   2          if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x04; //Output clock|输出时钟
 141   2          else              INTCLKO &= ~0x04; //No Clock Output|不输出时钟
 142   2      
 143   2          TH2 = (unsigned char)(TIMx->TIM_Value >> 8);
 144   2          TL2 = (unsigned char)TIMx->TIM_Value;
 145   2          if(TIMx->TIM_Run == ENABLE) AUXR |=  (1<<4);  //Start running|开始运行
 146   2          return  0;    //success|成功
 147   2        }
 148   1        return 2; //Error|错误
 149   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    814    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
