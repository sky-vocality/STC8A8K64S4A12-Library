C51 COMPILER V9.59.0.0   TIMER                                                             02/06/2021 13:14:08 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Objects\timer.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Core\Src\timer.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Core\Inc) DEBUG OBJEC
                    -TEXTEND PRINT(.\Listings\timer.lst) TABS(2) OBJECT(.\Objects\timer.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    timer.c
   4            * @author  sky-vocality(基于PineconePi(基于宏晶科技STC15库函数进行修改)库函数进行修改)
   5            * @version V1.0.0
   6            * @date    11-January-2021
   7            * @brief  This document is used for timer configuration 
   8            * @License:GNU General Public License v3.0         
   9            ******************************************************************************
  10            * @attention
  11            *
  12            *Timer Interrupt Processing Function in timer.c
  13            *  
  14            * 
  15            * 
  16            * 
  17            * 
  18            *
  19            * 
  20            ******************************************************************************
  21            **/
  22          
  23          #include  "timer.h"
  24          
  25          double wheel_speed = 0.0;
  26          
  27          /********************* Timer0 interrupt function|Timer0中断函数************************/
  28          void timer0_int (void) interrupt 1
  29          {
  30   1        wheel_speed = encoder_num/TIME;
  31   1      }
  32          
  33          /********************* Timer1 interrupt function|Timer1中断函数************************/
  34          void timer1_int (void) interrupt 3
  35          {
  36   1        jy901_update();
  37   1      }
  38          
  39          /********************* Timer2 interrupt function|Timer2中断函数************************/
  40          void timer2_int (void) interrupt 12
  41          {
  42   1      
  43   1      }
  44          
  45          
  46          //========================================================================
  47          // Function:unsigned char Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)|函数: unsigned char Time
             -r_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  48          // Description: Timer initialization program.|描述: 定时器初始化程序.
  49          // Parameter: Refer to the structure definition in timer. C|参数:  请参考timer.c里面的结构体定义
  50          //       
  51          //       
  52          // Return:|返回: 
  53          // Version:VER1.0.0|版本: VER1.0.0
C51 COMPILER V9.59.0.0   TIMER                                                             02/06/2021 13:14:08 PAGE 2   

  54          // Date:2021-01-29|日期: 2018-01-29
  55          // Author: sky-vokality|作者: sky-vokality
  56          // Note:|备注:
  57          //  
  58          //  
  59          //  
  60          //  
  61          //  
  62          //========================================================================
  63          unsigned char Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  64          {
  65   1        if(TIM > Timer2)  return 1; //Empty operation|空操作
  66   1      
  67   1        EA = 1;
  68   1        
  69   1        if(TIM == Timer0)
  70   1        {
  71   2          TR0 = 0;    //Stop count|停止计数
  72   2          if(TIMx->TIM_Interrupt == ENABLE)   ET0 = 1;  //Allowed interruption|允许中断
  73   2          else                  ET0 = 0;  //No interruption|禁止中断
  74   2          if(TIMx->TIM_Polity == PolityHigh)    PT0 = 1;  //High priority interrupt|高优先级中断
  75   2          else                  PT0 = 0;  //Low priority interrupt|低优先级中断
  76   2          if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2; //Error|错误
  77   2          TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //Operating mode: 0:16 bit auto-reloading, 1:16 bit timing/count
             -ing, 2:8 bit auto-reloading, 3:16 bit auto-reloading, unshieldable interruption|工作模式,0: 16位自动重装, 1: 16位定时/计
             -数, 2: 8位自动重装, 3: 16位自动重装, 不可屏蔽中断
  78   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x80;  //12T
  79   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x80;  //1T
  80   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x04;  //External Counting or Frequency Division|对外计
             -数或分频
  81   2          else                    TMOD &= ~0x04;  //timing|定时
  82   2          if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x01; //Output clock|输出时钟
  83   2          else              INTCLKO &= ~0x01; //No Clock Output|不输出时钟
  84   2          
  85   2          TH0 = (unsigned char)(TIMx->TIM_Value >> 8);
  86   2          TL0 = (unsigned char)TIMx->TIM_Value;
  87   2          if(TIMx->TIM_Run == ENABLE) TR0 = 1;  //Start running|开始运行
  88   2          return  0;    //成功
  89   2        }
  90   1      
  91   1        if(TIM == Timer1)
  92   1        {
  93   2          TR1 = 0;    //Stop count停止计数
  94   2          if(TIMx->TIM_Interrupt == ENABLE)   ET1 = 1;  //Allowed interruption|允许中断
  95   2          else                  ET1 = 0;  //No interruption|禁止中断
  96   2          if(TIMx->TIM_Polity == PolityHigh)    PT1 = 1;  //High priority interrupt|高优先级中断
  97   2          else                  PT1 = 0;  //Low priority interrupt|低优先级中断
  98   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //error|错误
  99   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //Work mode, 0:16 bit auto-reloading, 1:16 bit timing/counting, 
             -2:8 bit auto-reloading|工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 100   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x40;  //12T
 101   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x40;  //1T
 102   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x40;  //External Counting or Frequency Division|对外计
             -数或分频
 103   2          else                    TMOD &= ~0x40;  //timing|定时
 104   2          if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x02; //Output clock|输出时钟
 105   2          else              INTCLKO &= ~0x02; //No Clock Output|不输出时钟
 106   2          
 107   2          TH1 = (unsigned char)(TIMx->TIM_Value >> 8);
 108   2          TL1 = (unsigned char)TIMx->TIM_Value;
 109   2          if(TIMx->TIM_Run == ENABLE) TR1 = 1;  //Start running|开始运行
 110   2          return  0;    //success|成功
C51 COMPILER V9.59.0.0   TIMER                                                             02/06/2021 13:14:08 PAGE 3   

 111   2        }
 112   1      
 113   1        if(TIM == Timer2)   //Timer2,固定为16位自动重装, 中断无优先级
 114   1        {
 115   2          AUXR &= ~(1<<4);  //Stop count停止计数
 116   2          if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //Allowed interruption|允许中断
 117   2          else                    IE2  &= ~(1<<2);  //No interruption|禁止中断
 118   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 119   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~(1<<2);  //12T
 120   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  (1<<2);  //1T
 121   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  AUXR |=  (1<<3);  //External Counting or Frequency Division|对外
             -计数或分频
 122   2          else                    AUXR &= ~(1<<3);  //timing|定时
 123   2          if(TIMx->TIM_ClkOut == ENABLE)  INTCLKO |=  0x04; //Output clock|输出时钟
 124   2          else              INTCLKO &= ~0x04; //No Clock Output|不输出时钟
 125   2      
 126   2          TH2 = (unsigned char)(TIMx->TIM_Value >> 8);
 127   2          TL2 = (unsigned char)TIMx->TIM_Value;
 128   2          if(TIMx->TIM_Run == ENABLE) AUXR |=  (1<<4);  //Start running|开始运行
 129   2          return  0;    //success|成功
 130   2        }
 131   1        return 2; //Error|错误
 132   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    603    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
